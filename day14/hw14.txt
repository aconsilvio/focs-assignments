# FOCS Fall 2016 Homework 14

You may edit your answers into this file, or add a separate file in the same directory.

If you add a separate file, please include the following at the top.
In either case, add your name and check one of the boxes.

Student Name: Annabel Consilvio
Check one:
[ ] I completed this assignment without assistance or external resources.
[x] I completed this assignment with David Abrahams (but mostly alone).

I. Math

In the following problems, we will look at how rapidly different functions grow.  We are interested in figuring out when two functions grow at the same rate.  Our definition of “the same” is:  f(n) grows no faster than g(n) if there is some minimum value for the argument (we’ll call it n0) after which f(n) is no larger than a constant multiple of g(n) -- call it k*g(n).  For example, if f(n) is 367n+1098 and g(n) is 2n, n0 could be 40 and k could be 200:  367n+1098 <= 200*2n for n>40.

For each of the following pairs of functions, identify a multiplier and a minimum value of n for which the first is no larger than the specified multiple of the second.  If you cannot -- if there are no such values -- explain why not.


  A. 367n+1098     and     2n                  
    
     [n0 = 40; k=200] 
  B. n^2 + 2n + 6    and     6n^2 - 25
  
     [n0 = 3; k=5]
  
  C. n^3 + n^2 - 2n     and     6n^2 - 25
  
    n^3 will always be larger than n^2 when n is a large number, so there is no way for this to work.
  
  D. 869,438    and    923
    
    [k=1000]  (It doesn't matter what n is since neither eq has n)
  
  E. 2^n    and    3^n
      
    [n0 = 1; k=1]  (The one on the right is already bigger)
  
  F. 3^n    and    2^n
      
    Impossible, the left equation grows faster than the right no matter what.
  
  G. log_2 n     and    log_10 n    [NB:  these are intended to be log-base-2 of n and log-base-10 of n]
     
    [n0 = 1; k=5]
   
  H. log_10 n^2    and     log_2 n
    
    [n0 = 1; k=1]
  

II. Linear data structures

For the following problem, assume that it costs 1 unit to access a structure -- an item in an array, a field in a record you are holding, the first element in a linked list -- whether reading or writing that element.  [Accessing the second element in a linked list costs 2 units if you have a pointer to the list:  1 unit to access the first element/read its “next” pointer, and another unit to access the second element.]

Assume that you have n elements stored in an array and the same n elements stored in a linked list; you have no other references to these data structures.  You may assume that n > 10.  How much does it cost to perform each of the following actions?

  A. Read the value of the first element in the array?  In the list?
      
    It costs 1 unit to get the first element of the array.
    It costs 1 unit to get the first element of the linked-list.
  
  B. Read the value of the seventh element in the array?  In the list?
      
    It costs 7 units to get the 7th element of the array.
    It costs 7 units to get the 7th element of the list.
  
  C. Add an element to the array?  [Where is the cheapest place to add it?]  To the list?  [Where is the cheapest place to add it?]
      
    Adding an element to an array is cheapest at the end and it only costs 1 unit (it would cost a lot more to add it at the beginning because you would have to shift all the other elements over.)  Adding an element to a linked list is cheapest at the beginning and only costs one unit. 
  
  D. Delete the fifth element from the array?  From the list?
      
    Deleteing the fifth element of the array costs n-5 units (you need to shift the elements after the 5th forward one).  Deleteing the fifth element from the list only costs one unit because you can just change where the elements are pointing.
  
  E. Confirm that a particular element -- say x -- is present in the array?  In the list?
      
    In the worst case scenario, it would take n units to do this if the x was the final element for both the array and the list.
  
  F. Confirm that a particular element -- say y -- is NOT present in the array?  In the list?
    
    In the worst case scenario, it would take n units to do this if the y was the final element for both the array and the list.
  
Now assume that you can maintain one extra piece of storage for the data structure.  In the case of the array, you may want to maintain a length reference.
In the case of the linked list, what would be similarly helpful?

    A pointer at the end would be helpful for a linked list.

G. How much would it cost now to add an element to the end of the array?  To add an element to the end of the list?
    
    Now it would only cost 1 unit to add to the end of an array or the end of the list.
  
H. How much would it cost now to delete an element from the array?  From the list?  What if it were the final element?  The penultimate element?
    
    It would still cost 1 unit to delete from the linked list, but it would depend on where the element is for an array.  If it is the final element it would only cost 1 unit and if it was the penultimate element it would only cost 2.
  
Finally, assume that both the array and the linked list are sorted, i.e., that their elements are in some predictable order (say, comparable by < or <=).
 
  J. How much would it cost to confirm that a particular element -- say x -- is present in the array?  In the list?  To confirm that a particular element -- say y -- is not present in the array?  In the list?
    
    If the array were sorted, it would only be a log n units because you could repeatedly split the the array into smaller pieces to search through.  The linked list would still be n since you can't iterate through it the same way.  To confirm something is not in the list would be the same cost as confirming something is in the list.
  